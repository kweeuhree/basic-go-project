package models

import (
	"database/sql"
	"time"
)

// add a new Snippet struct to represent the data for an individual snippet

// add a SnippetModel type with methods on it

// to use this model in handlers a new SnippetModel struct needs to be established
// in the main() function via the application struct - just like with other dependencies

// define a Snippet type to hold the data for an individual snippet
type Snippet struct {
	ID      int
	Title   string
	Content string
	Created time.Time
	Expires time.Time
}

// define a SnippetModel type which wraps a sql.DB connection pool
type SnippetModel struct {
	DB *sql.DB
}

// insert a new snippet into the database
func (m *SnippetModel) Insert(title string, content string, expires int) (int, error) {
	// use placeholder parameters instead of interpolating data in the SQL query
	// as this is untrusted user input from a form
	stmt := `INSERT INTO snippets (title, content, created, expires)
	VALUES(?, ?, UTC_TIMESTAMP(), DATE_ADD(UTC_TIMESTAMP(), INTERVAL ? DAY))`

	// use Exec() method ont he embedded connection pool to execute the statement
	// parameters: SQL statement, title, content and expiry
	// this method returns a sql.Result tupe, which contains some basic information
	// about what happened when the statement was executed
	// -- sql.Result type returned by DB.Exec() provides:
	// -- LastInsetId() which returns the integer (int64) generated by the database
	// -- RowsAffected() which return the number (int64) of rows affected by the statement
	result, err := m.DB.Exec(stmt, title, content, expires)
	if err != nil {
		return 0, err
	}

	// use the LastInserId() method on the result to get the ID of
	// the newly created record in the snippets table
	id, err := result.LastInsertId()
	if err != nil {
		return 0, err
	}

	// the id returned has the type int64, convert to an int type
	return int(id), nil
}

// return a specific snippet based on its id
func (m *SnippetModel) Get(id int) (*Snippet, error) {
	return nil, nil
}

// return the 10 most recently created snippets
func (m *SnippetModel) Latest() ([]*Snippet, error) {
	return nil, nil
}
